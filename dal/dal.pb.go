// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dal.proto

package dal

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryRequest struct {
	Sql                  string   `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff3f5d0ea5de2a06, []int{0}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *QueryRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Rows struct {
	Value                []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rows) Reset()         { *m = Rows{} }
func (m *Rows) String() string { return proto.CompactTextString(m) }
func (*Rows) ProtoMessage()    {}
func (*Rows) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff3f5d0ea5de2a06, []int{1}
}

func (m *Rows) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rows.Unmarshal(m, b)
}
func (m *Rows) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rows.Marshal(b, m, deterministic)
}
func (m *Rows) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rows.Merge(m, src)
}
func (m *Rows) XXX_Size() int {
	return xxx_messageInfo_Rows.Size(m)
}
func (m *Rows) XXX_DiscardUnknown() {
	xxx_messageInfo_Rows.DiscardUnknown(m)
}

var xxx_messageInfo_Rows proto.InternalMessageInfo

func (m *Rows) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryReply struct {
	Result               *Result  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryReply) Reset()         { *m = QueryReply{} }
func (m *QueryReply) String() string { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()    {}
func (*QueryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff3f5d0ea5de2a06, []int{2}
}

func (m *QueryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryReply.Unmarshal(m, b)
}
func (m *QueryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryReply.Marshal(b, m, deterministic)
}
func (m *QueryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReply.Merge(m, src)
}
func (m *QueryReply) XXX_Size() int {
	return xxx_messageInfo_QueryReply.Size(m)
}
func (m *QueryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReply proto.InternalMessageInfo

func (m *QueryReply) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *QueryReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Result struct {
	Result               map[string]*Rows `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff3f5d0ea5de2a06, []int{3}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetResult() map[string]*Rows {
	if m != nil {
		return m.Result
	}
	return nil
}

type Error struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff3f5d0ea5de2a06, []int{4}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "dal.QueryRequest")
	proto.RegisterType((*Rows)(nil), "dal.Rows")
	proto.RegisterType((*QueryReply)(nil), "dal.QueryReply")
	proto.RegisterType((*Result)(nil), "dal.Result")
	proto.RegisterMapType((map[string]*Rows)(nil), "dal.Result.ResultEntry")
	proto.RegisterType((*Error)(nil), "dal.Error")
}

func init() { proto.RegisterFile("dal.proto", fileDescriptor_ff3f5d0ea5de2a06) }

var fileDescriptor_ff3f5d0ea5de2a06 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x51, 0x4b, 0xfb, 0x30,
	0x14, 0xc5, 0xff, 0x5d, 0xff, 0xdd, 0xd8, 0xad, 0xa0, 0x06, 0xc1, 0x3a, 0x04, 0x67, 0x04, 0xd9,
	0x4b, 0x2b, 0x54, 0x11, 0xf1, 0x71, 0x74, 0x8f, 0x82, 0xc6, 0x4f, 0x10, 0xdb, 0x8b, 0x68, 0xb3,
	0xa5, 0x4b, 0x52, 0x47, 0x9e, 0xfc, 0xea, 0x92, 0xb4, 0x85, 0x3e, 0x25, 0xf7, 0x9c, 0xe4, 0x77,
	0xef, 0x49, 0x60, 0x5e, 0x71, 0x91, 0x35, 0x4a, 0x1a, 0x49, 0xc2, 0x8a, 0x0b, 0xfa, 0x08, 0x47,
	0x6f, 0x2d, 0x2a, 0xcb, 0x70, 0xdf, 0xa2, 0x36, 0xe4, 0x04, 0x42, 0xbd, 0x17, 0x49, 0xb0, 0x0c,
	0x56, 0x73, 0xe6, 0xb6, 0xe4, 0x0c, 0x22, 0x23, 0x6b, 0xdc, 0x25, 0x13, 0xaf, 0x75, 0x05, 0xbd,
	0x84, 0xff, 0x4c, 0x1e, 0xb4, 0x73, 0x7f, 0xb8, 0x68, 0x31, 0x09, 0x96, 0xa1, 0x73, 0x7d, 0x41,
	0xdf, 0x01, 0x7a, 0x6a, 0x23, 0x2c, 0xb9, 0x81, 0xa9, 0x42, 0xdd, 0x0a, 0xe3, 0xb1, 0x71, 0x1e,
	0x67, 0x6e, 0x08, 0xe6, 0x25, 0xd6, 0x5b, 0x64, 0x09, 0x11, 0x2a, 0x25, 0x95, 0x6f, 0x13, 0xe7,
	0xe0, 0xcf, 0x6c, 0x9c, 0xc2, 0x3a, 0x83, 0xfe, 0xc2, 0xb4, 0xbb, 0x43, 0xee, 0x46, 0xc0, 0x70,
	0x15, 0xe7, 0xe7, 0x23, 0x60, 0xbf, 0x6c, 0x76, 0x46, 0xd9, 0x01, 0xbe, 0x28, 0x20, 0x1e, 0xc9,
	0x2e, 0x64, 0x8d, 0x76, 0x08, 0x59, 0xa3, 0x25, 0x57, 0x43, 0x8c, 0xae, 0xfb, 0xbc, 0x03, 0xca,
	0x83, 0xee, 0x13, 0x3d, 0x4f, 0x9e, 0x02, 0x7a, 0x0d, 0x91, 0x1f, 0x88, 0x24, 0x30, 0xdb, 0xa2,
	0xd6, 0xfc, 0x13, 0x7b, 0xc6, 0x50, 0xe6, 0x0f, 0x10, 0x16, 0x5c, 0x90, 0x14, 0x22, 0x9f, 0x9f,
	0x9c, 0x7a, 0xd0, 0xf8, 0x85, 0x17, 0xc7, 0x63, 0xa9, 0x11, 0x96, 0xfe, 0x5b, 0xdf, 0xc2, 0x05,
	0xb6, 0x59, 0xf5, 0x65, 0xb8, 0x4e, 0x1b, 0x25, 0xbf, 0xb1, 0x34, 0xd9, 0x56, 0x96, 0x75, 0x5a,
	0x71, 0xb1, 0x9e, 0xbd, 0xc8, 0xb2, 0x2e, 0xb8, 0x78, 0x0d, 0x3e, 0xa6, 0xfe, 0xe3, 0xee, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x78, 0x4b, 0xc6, 0x0d, 0xc5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DalClient is the client API for Dal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DalClient interface {
	// Sends a greeting
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
}

type dalClient struct {
	cc *grpc.ClientConn
}

func NewDalClient(cc *grpc.ClientConn) DalClient {
	return &dalClient{cc}
}

func (c *dalClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/dal.Dal/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DalServer is the server API for Dal service.
type DalServer interface {
	// Sends a greeting
	Query(context.Context, *QueryRequest) (*QueryReply, error)
}

func RegisterDalServer(s *grpc.Server, srv DalServer) {
	s.RegisterService(&_Dal_serviceDesc, srv)
}

func _Dal_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DalServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dal.Dal/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DalServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dal.Dal",
	HandlerType: (*DalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Dal_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dal.proto",
}
